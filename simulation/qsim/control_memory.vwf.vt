// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/08/2025 11:58:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          memory_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memory_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [17:0] addr_base;
reg clock;
reg [2:0] current_zoom;
reg enable;
reg [2:0] operation;
// wires                                               
wire [17:0] addr_out;
wire [2:0] counter_op;
wire done;
wire wr_enable;

// assign statements (if any)                          
memory_control i1 (
// port map - connection between master ports and signals/registers   
	.addr_base(addr_base),
	.addr_out(addr_out),
	.clock(clock),
	.counter_op(counter_op),
	.current_zoom(current_zoom),
	.done(done),
	.enable(enable),
	.operation(operation),
	.wr_enable(wr_enable)
);
initial 
begin 
#1000000 $finish;
end 
// addr_base[ 17 ]
initial
begin
	addr_base[17] = 1'b0;
end 
// addr_base[ 16 ]
initial
begin
	addr_base[16] = 1'b0;
end 
// addr_base[ 15 ]
initial
begin
	addr_base[15] = 1'b0;
end 
// addr_base[ 14 ]
initial
begin
	addr_base[14] = 1'b0;
end 
// addr_base[ 13 ]
initial
begin
	addr_base[13] = 1'b0;
end 
// addr_base[ 12 ]
initial
begin
	addr_base[12] = 1'b0;
end 
// addr_base[ 11 ]
initial
begin
	addr_base[11] = 1'b0;
end 
// addr_base[ 10 ]
initial
begin
	addr_base[10] = 1'b0;
end 
// addr_base[ 9 ]
initial
begin
	addr_base[9] = 1'b0;
end 
// addr_base[ 8 ]
initial
begin
	addr_base[8] = 1'b0;
end 
// addr_base[ 7 ]
initial
begin
	addr_base[7] = 1'b0;
end 
// addr_base[ 6 ]
initial
begin
	addr_base[6] = 1'b0;
end 
// addr_base[ 5 ]
initial
begin
	addr_base[5] = 1'b0;
end 
// addr_base[ 4 ]
initial
begin
	addr_base[4] = 1'b0;
end 
// addr_base[ 3 ]
initial
begin
	addr_base[3] = 1'b0;
end 
// addr_base[ 2 ]
initial
begin
	addr_base[2] = 1'b0;
end 
// addr_base[ 1 ]
initial
begin
	addr_base[1] = 1'b0;
end 
// addr_base[ 0 ]
initial
begin
	addr_base[0] = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// current_zoom[ 2 ]
initial
begin
	current_zoom[2] = 1'b1;
end 
// current_zoom[ 1 ]
initial
begin
	current_zoom[1] = 1'b0;
end 
// current_zoom[ 0 ]
initial
begin
	current_zoom[0] = 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #10000 1'b1;
	enable = #20000 1'b0;
end 
// operation[ 2 ]
initial
begin
	operation[2] = 1'b1;
end 
// operation[ 1 ]
initial
begin
	operation[1] = 1'b0;
end 
// operation[ 0 ]
initial
begin
	operation[0] = 1'b0;
end 
endmodule

